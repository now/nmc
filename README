                                   NoMarks

  NoMarks is a typesetting language without any markups or markdowns.  That’s
  not strictly true, as it employs various symbols to define the structure, but
  it doesn’t try to overprice nor underprice you by trying its hardest to be as
  unambigiuous as possible in how it treats your content.  This is achieved by
  using indentation for structural nesting and placing various symbols (or,
  well, marks) in said indentation to define what content follows.  This is of
  course similar to how, for example Markdown works.  The difference is that a
  symbol appearing at the beginning of the textual content of a line can never
  be misinterpreted as a symbol/mark.  The indentation also makes it easy to
  see what level of nesting you’re content is at, making it easy to navigate.
  Some symbols are also treated as special in inline content.  Here, too,
  NoMarks tries very hard to make processing unambiguous.  To stay true to this
  goal, there’s no escape mechanism using backslashes or similar.  But let’s
  not waste any more time with this rather informal introduction.  Instead,
  let’s look at the constructs that make up NoMarks.

§ Block Structures

    A NoMarks document consists of zero or more blank lines, a title, zero or
    more blocks, zero or more sections, and finally zero or more blank lines.
    Titles, blocks, and sections are separated from each other by one or more
    blank lines.  A blank line consists of zero or more whitespace characters.
    Any blank lines at the beginning or end of the document are ignored.

  § Document Title

      A NoMarks document’s title consists of one or more lines of text.  As
      we’ll discuss further in the next section, any lines that follow the
      first must be indented at the same level as the first line, in this case
      two spaces.  It is customary for a NoMarks document’s title to be
      centered.  This document’s title was written as

                                           NoMarks

      The document title is left completely unprocessed for inlines.

  § Paragraphs

      A paragraph consists of one or more lines indented by 2×n spaces, where
      /n/ is the current section level (nesting) followed by 2 additional
      spaces, making up the tag of the content that follows.  A “tag” defines
      what content follows and is seen at the beginning of all block-level
      elements.  The first paragraph of this document was thus written as

          NoMarks is a typesetting language without any markups or markdowns.  That’s
          strictly not true, as it employs various symbols to define the structure, but

      Actually, this indention rule is common for all block elements.  Thus,
      the current indention tells you how deeply you are nested and tells an
      NoMarks processor how to properly treat different elements in the
      document.

      Furthermore, the fact that lines beyond the first are tagged by two
      spaces isn’t actually the case.  These lines are tagged as “continuation
      lines” and this rule applies for all block-level elements.

  § Code Blocks

      A code block consists of one or more lines tagged by four spaces.  Note
      that this is in addition to the current indentation level as described in
      the previous section.  The code block from the previous section was thus
      written as

                  NoMarks is a typesetting language without any markups or markdowns.  That’s
                  strictly not true, as it employs various symbols to define the structure, but

      Any blank lines “between” what would otherwise be seen as separate code
      blocks are included in the first code block, so they don’t require any
      indentation.

      The contents of a code block is left completely unprocessed, so you don’t
      need to worry about symbols getting misinterpreted as inline structures.

  § Enumerations

      An enumeration – an ordered list – consists of one or more enumerated
      items.  An enumerated item consists of a list-item number followed by
      space, then by a paragraph, that is, two spaces and one or more inlines.
      This paragraph may then be followed by zero or more block-level elements.
      These block-level elements will be indented one level further in than the
      item itself, so the indentation will be 2×(n+1), where /n/ is the current
      section level.

      The enumeration

    ₁   This is item 1.
    ₂   This is item 2.

        It consists of two paragraphs.
    ₃   This is item 3.

      is thus written as

        ₁   This is item 1.
        ₂   This is item 2.

            It consists of two paragraphs.
        ₃   This is item 3.

      Perhaps you caught on to the reason for the three spaces?  Though not
      strictly necessary for being able to unambiguously parse the first line,
      they are nonetheless needed for the aesthetics of having them line up
      with any following block elements.  Having this additional indent also
      makes it possible to have more than nine items in the list and easier to
      see the numerals.

  § Itemizations

      An itemization – an unordered list – works the same way as an
      enumeration.  The only difference is that a bullet is used as a tag
      instead of list-item numbers:

        •   This is item 1
        •   This is item 2
        •   Item 3 here

      renders

    •   This is item 1
    •   This is item 2
    •   Item 3 here

  § Definitions

    = Definitions. = A list of definitions consist of one definition or more.
    = Definition. = A definition consists of a term followed by one more blocks
        that define the meaning of the term.
    = Term. = A term consists of a “= ” tag in the indent followed by
        unprocessed text up until a terminating “. = ”.

      The above list of definitions was thus written as

        = Definitions. = A list of definitions consist of one definition or more.
        = Definition. = A definition consists of a term followed by one more blocks
          that define the meaning of the term.
        = Term. = A term consists of a “= ” tag in the indent followed by
          unprocessed text up until a terminating “. = ”.

      There may be any number of spaces between ‘.’ and ‘=’ in the termination
      of a term.

  § Quotes

      Quotes consists one or more lines followed by zero or one attributions.
      Each line consists of a one or more inlines.  The attribution also
      consists of one or more inlines.

      To quote Shakespeare:

    > To clique, or not to clique, that is the question:
    > Whether ’tis nobler in the mind to suffer
    > The slings and arrows of outrageous fortune,
    > Or to take arms against a sea of troubles,
    > And by opposing end them?

      Here, each line is an actual line from Hamlet.  It was rendered via

        > To clique, or not to clique, that is the question:
        > Whether 'tis nobler in the mind to suffer
        > The slings and arrows of outrageous fortune,
        > Or to take arms against a sea of troubles,
        > And by opposing end them?

      Sometimes you want a quote to span multiple lines, but only actually
      render as one.  In that case you simply replace the ‘>’ part of the tag
      with a space, ‘ ’, making it a continuation line.  Let’s
      use the following quote, due to Antoine de Saint-Exupéry, as an example:

    > A designer knows he has achieved perfection not when there is nothing
      left to add, but when there is nothing left to take away.
    — Antoine de Saint-Exupéry

      This was written as

        > A designer knows he has achieved perfection not when there is nothing
          left to add, but when there is nothing left to take away.
        — Antoine de Saint-Exupéry

      This example also introduced the attribution line.  It is tagged by “— ”,
      that is, an em dash, ‘—’, followed by a space, ‘ ’.

  § Tables

      Tables consist of zero or one rows that make up the head of the table,
      followed by one or more rows that make up its body.  The head is, if
      present, separated from the body by a separator line.  Each row consists
      of one or more cells demarkated by ‘‹|›’ symbols, where the first cells
      left demarkation symbol appears, as is usual, in the indent.  The
      separator line is tagged by “‹|-›” and may be followed by any content.
      For clarity, it should display nicely with the rest of the table,
      continuing the sequence of ‘-’ across each column, using ‘+’ signs where
      it intersects with columns, and be terminated by a ‘‹|›’.

      Thus, the table

    | Part  | Consists of |
    |-------+-------------|
    | Table | Head?, Body |
    | Head  | Row         |
    | Body  | Rows        |
    | Row   | Cells       |

      is written as

          Thus, the table

        | Part  | Consists of |
        |-------+-------------|
        | Table | Head?, Body |
        | Head  | Row         |
        | Body  | Rows        |
        | Row   | Cells       |

          is written as

        …

  § Footnotes

      Any block may be followed by a list of footnotes.  Footnotes are usually
      used for various inlines that lack a decent syntax.  Footnotes consist of
      a footnote identifier followed by a space followed by the footnote
      definition.  Valid footnote identifiers are ‹¹›, ‹²›, ‹³›, ‹⁴›, ‹⁵›, ‹⁶›,
      ‹⁷›, ‹⁸›, ‹⁹›, and ‹⁰›.  These identifiers may be combined further to
      create more than the initial ten identifiers, but it’s bad form to use
      too many footnotes per block.

      Footnote definitions aren’t free-form and must follow a set of patterns.
      Here’s an example:

          Drop me a line¹.

        ¹ Email me at mailto:example@example.com

      This is a paragraph consisting of the text “Drop me a line”.  The word
      “line” has a footnote associated with it, identified by ‹¹›.  The
      footnote is defined as a link to “mailto:example@example.com”.  The link
      title will be “Email me”.  In the NoMarks XML serialization, known as
      NML, this will be converted to

        <p>Drop me a
          <ref title="Email me"
               uri="mailto:example@example.com">line</ref></p>

      The identifiers don’t have to come in order, which means that you don’t
      have to re-order them in the event that footnotes are added and deleted
      during editing.

      Footnotes nest, so you don’t have to define a footnote as soon as
      possible.  You can, for example, leave all footnoting of an enumeration’s
      items to the list as a whole, or even the section that the enumeration
      appears in.  (In fact, you can’t define footnotes for the first paragraph
      of an item anyway.  This is a limitation that may be lifted in the
      future, but it’s really not that much of a limitation, as having
      footnotes sprinkled inside your lists makes for very messy lists.  In
      fact, having blocks in your lists at all is sort of messy, but let’s not
      digress…)

§ Sections

    Sections consist of a title tagged by “§ ”, followed by zero or more
    blocks, followed by zero or more subsections.  The blocks and subsections
    are indented one additional level.

    The first section of this document was written as

      § Block Structures

          A NoMarks document consists of zero or more blank lines, a title, …

§ Inlines

    Inlines consist of one or more words or inline elements – as described
    below – separated by whitespace or punctuation.  All whitespace is
    normalized into one space character, ‘ ’.

  § Abbreviations

      Abbreviations are defined using footnotes.  Defining an abbreviation,
      such as NML¹, looks like

    ¹ Abbreviation for NoMarks xmL

          Abbreviations are defined using footnotes.  Defining an abbreviation,
          such as NML¹, looks like

        ¹ Abbreviation for NoMarks xmL

      Any text that follows “Abbreviation for” will be used as the definition
      of the abbreviation.

  § Code

      Inline code is surrounded by ‘‹’ and ‘›’.  Taking a line earlier in this
      document as an example, we thus have

        Valid footnote identifiers are ‹¹›, ‹²›, …

      The contents inside a code inline is left completely unprocessed.  You
      can thus use code inlines to write characters that would otherwise be
      seen as special for NoMarks, as long as it makes sense to mark them as
      code.  The end character, ‘›’, can occur at the end of a code inline, for
      example, ‹‹code is written like this››, by following the last ‘›’ by
      another ‘›’.

  § Emphasis

      Emphasis is written like ‹/this/›.  Emphasis doesn’t nest.  The ending
      solidus, ‘/’, will only be seen as an ending emphasis if it’s not
      followed by another solidus.

  § Escaped Characters

      To be able to write characters that would otherwise be seen as special
      for NoMarks, escaped characters, may be used.  Escaped characters are
      written as ‹‘c’›, where /c/ is the character to escape.  Note how well
      this meshes with the standard practice of surrounding a character with
      single quotes in English when you are referring to the character itself.
      Also note that the single quotes will be retained in any output, as the
      whole sequence is simply seen as text.  Only sequences where only one
      character appears between single quotes are handled this way, so you can
      use unescaped sequences inside nested quotes (“…‘…’…”) if you so wish.

  § Groups

      Sometimes you want a footnote to refer to more than one inline.  You can
      then group a number of inlines by surrounding them with ‘{’ and ‘}’:

        {Drop me a line}¹.

      Here, footnote ‹¹› will refer to the words “Drop me a line”.  Groups
      nest.

  § Footnotes

      Footnotes may be added to any inline by appending them to it.  More than
      one footnote may be added by separating the footnotes with a ‹⁺›.
      Footnotes are processed left to right, so the leftmost will be the
      innermost one.  Thus,

        {Drop me a line}¹⁺²

      will be represented by the following (imaginary) XML structure

        <footnote identifier="²">
          <footnote identifier="¹">
            <group>Drop me a line</group>
          </footnote>
        </footnote>

  § Links

      Links are defined using footnotes.  You can, for example, link to
      http://example.com¹ by writing

    ¹ Visit IANA’s example domain page at http://example.com/

          Links are defined using footnotes.  You can, for example, link to
          http://example.com¹ by writing

        ¹ Visit IANA’s example domain page at http://example.com/

      Link definitions are rather free-form.  They contain a title, which can
      be any string, followed by the word “at”, followed by a non-empty
      sequence of non-space characters that constitute the uniform resource
      identifier (URI) that the link should point to.
